type Exposure @jsonField {
  total: String
  own: String
  others: Int
}

type Others @jsonField {
  who: String
  value: String
}

type StakingLedger @jsonField {
  stash: String
  total: Int
  active: Int
  claimedRewards: [Int]
}

type ValidatorPrefs @jsonField {
  commission: String
  blocked: Boolean
}

type ValidatorsInfo @entity {
  id: ID!
  accountId: String
  controllerId: String
  exposure: Exposure
  stakingLedger: StakingLedger
  stashId: String
  validatorPrefs: ValidatorPrefs
  active: Boolean
}

type EraSlashes @entity {
  id: ID!
  validators: String
}

type EraPreferences @entity {
  id: ID!
  validators: String
}

type EraPoints @entity {
  id: ID!
  eraPoints: String
  validators: String
}

type CouncilVotes @entity {
  id: ID!
  stake: String
  votes: [String]
}

type Vote @jsonField {
  accountId: String
}

type Referendum @entity {
  id: ID!
  votes: [Vote]
}

type Proposal @entity {
  id: ID!
  proposer: String
  seconds: [String]
}

type Nomination @entity {
  id: ID!
  nominator: String
  targets: [String]
}

type MaxNominatorRewardedPerValidator @entity {
  id: ID!
  maxNominatorRewardedPerValidator: Int
}

type SumReward @entity {
  id: ID! # AccountId
  accountReward: BigInt!

  accountSlash: BigInt!

  accountTotal: BigInt!

  rewards: [StakingReward] @derivedFrom(field: "account")

  slashs: [StakingSlash] @derivedFrom(field: "account")
}

# in early stage of kusama, some validators didn't need to bond to start staking
type NoBondRecordAccount @entity {
  id: ID! # AccountId
  firstRewardAt: Int!
}

type StakingReward @entity {
  id: ID! #blockHeight-eventIdx
  account: SumReward!
  balance: BigInt!
  date: Date!
}

type StakingSlash @entity {
  id: ID! #blockHeight-eventIdx
  account: SumReward!
  balance: BigInt!
  date: Date!
}
